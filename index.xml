<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ijayer</title>
    <link>https://ijayer.github.io/</link>
    <description>Recent content on ijayer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 08 Mar 2020 21:58:50 +0800</lastBuildDate>
    
	<atom:link href="https://ijayer.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Simple Scheduling Library (Go) [译]</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20200308_simple_scheduler_lib/</link>
      <pubDate>Sun, 08 Mar 2020 21:58:50 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20200308_simple_scheduler_lib/</guid>
      <description>&lt;!-- 摘要 --&gt;

&lt;p&gt;现在的应用程序或多或少都有这样得需求，既 &lt;code&gt;在给定的某段时间重复执行一段代码&lt;/code&gt;。这段代码可能是从其他数据源获取数据进行解析，亦或是发送一些数据到其他地方，如 MQ、Handler 等。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rabbitmq | 06 - RPC</title>
      <link>https://ijayer.github.io/post/tech/mq/20190614-rabbitmq-rpc/</link>
      <pubDate>Sat, 22 Jun 2019 22:56:56 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/mq/20190614-rabbitmq-rpc/</guid>
      <description>这一节使用 RabbitMQ 构建 RPC 系统：包含一个客户端和一个可扩展的服务端，服务端是一个虚拟的 RPC Service，用来返回 Fibonacci 数 有关 RPC 的说明： 尽管 RPC 在计算过程中</description>
    </item>
    
    <item>
      <title>Rabbitmq | 05 - Topics</title>
      <link>https://ijayer.github.io/post/tech/mq/20190613-rabbitmq-topics/</link>
      <pubDate>Thu, 13 Jun 2019 22:48:56 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/mq/20190613-rabbitmq-topics/</guid>
      <description>前面，分别使用了 fanout 和 direct 类型实现了简易的日志生产、路由和消费，虽然 direct 可以按照 Binding_Key 绑定关系实现日志过滤，但其仍有局限性，即不能基于多个标准进行消息</description>
    </item>
    
    <item>
      <title>Rabbitmq | 04 - Routing</title>
      <link>https://ijayer.github.io/post/tech/mq/20190602-rabbitmq-routing/</link>
      <pubDate>Sun, 02 Jun 2019 17:05:35 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/mq/20190602-rabbitmq-routing/</guid>
      <description>这一小节继续前面的内容，给日志系统添加新特性：只订阅一部分消息。 Bindings 上一小节我们创建了 Exchange 和 Queue 的一个绑定，代码描述如下： 1 2 3 4 5 6 7 err = ch.QueueBind( q.Name, &amp;#34;&amp;#34;,</description>
    </item>
    
    <item>
      <title>Rabbitmq | 03 - Publish/Subscribe</title>
      <link>https://ijayer.github.io/post/tech/mq/20190519-rabbitmq-publish.subscribe/</link>
      <pubDate>Sun, 19 May 2019 17:28:12 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/mq/20190519-rabbitmq-publish.subscribe/</guid>
      <description>Publish/Subscribe: Send messages to many consumers at once. 这一小节，通过实现一个日志系统来学习 RabbitMQ p/b 的简单用法：该日志系统由2个程序构成，第一个用来发送日志消息，第二个则用来接收并将其</description>
    </item>
    
    <item>
      <title>Useful Tools</title>
      <link>https://ijayer.github.io/post/tech/tools/useful-tools/</link>
      <pubDate>Sun, 21 Apr 2019 21:05:02 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/tools/useful-tools/</guid>
      <description>个人版工具集，涉及开发、日常办公，效率提升，浏览器插件等等等 Windows System tools 垃圾清理：Jetclean 截图工具：Pickpick 画图工具：Draw.I</description>
    </item>
    
    <item>
      <title>Rabbitmq | 02 - Work Queues</title>
      <link>https://ijayer.github.io/post/tech/mq/20190401-rabbitmq-work-queues/</link>
      <pubDate>Mon, 01 Apr 2019 11:13:00 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/mq/20190401-rabbitmq-work-queues/</guid>
      <description>实现一个用来在多个 Workers 之间分发 耗时任务 的工作队列。 那么为什么会出现工作队列呢？可以和上节的 Simple 队列做简单对比： Simple 队列是一一对应的，而且我们在实际</description>
    </item>
    
    <item>
      <title>Rabbitmq | 01 - Hello World</title>
      <link>https://ijayer.github.io/post/tech/mq/20190328-rabbitmq-hello-world/</link>
      <pubDate>Fri, 29 Mar 2019 16:05:39 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/mq/20190328-rabbitmq-hello-world/</guid>
      <description>RabbitMQ 是一个开源的、使用最广的消息队列。 Erlang 开发，对高并发、路由、负载均衡、数据持久化有很好的支持。 支持的协议：AMQP，XMPP, SMTP, STOMP 支持集群部</description>
    </item>
    
    <item>
      <title>Message Queue Compares</title>
      <link>https://ijayer.github.io/post/tech/mq/20190327-message-queue-compare/</link>
      <pubDate>Wed, 27 Mar 2019 21:37:23 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/mq/20190327-message-queue-compare/</guid>
      <description>几种常见的消息队列比较： RabbitMQ ActiveMQ ZeroMQ Redis RocketMQ Kafaka Message Queue Wiki: Message Queue Message queues provide an asynchronous communications protocol, meaning that then sender and receiver of the message do not need to interact with the message queue at the same time. Message placed onto the queue are stored until the recipient</description>
    </item>
    
    <item>
      <title>『Go核心36讲』| 07 - go语句以及执行规则（下）</title>
      <link>https://ijayer.github.io/post/tech/code/golang/tutorial-go36-07/</link>
      <pubDate>Sun, 13 Jan 2019 11:57:26 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/tutorial-go36-07/</guid>
      <description>Q1：用什么手段可以对 goroutine 的启用数量加以限制 ? Q2：怎样才能让主 goroutine 等待其他 goroutine ? Q3：怎样让我们启用的多个 goroutine 按照既定的顺序执行 ? 专栏：17 | go 语</description>
    </item>
    
    <item>
      <title>『Go核心36讲』| 06 - go语句以及执行规则（上）</title>
      <link>https://ijayer.github.io/post/tech/code/golang/tutorial-go36-06/</link>
      <pubDate>Sat, 12 Jan 2019 14:51:10 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/tutorial-go36-06/</guid>
      <description>进程、线程(系统级) goroutine(用户级) 调度器 专栏：16 | go 语句及其执行规则（上） — Malcolm Lightbody @mlightbody 前导内容：进程与线程 进程：描述的就是程序的</description>
    </item>
    
    <item>
      <title>『Go核心36讲』| 05 - 使用函数的正确姿势</title>
      <link>https://ijayer.github.io/post/tech/code/golang/tutorial-go36-05/</link>
      <pubDate>Mon, 07 Jan 2019 11:37:08 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/tutorial-go36-05/</guid>
      <description>函数类型、函数签名 高阶函数 闭包 函数传参 专栏：12 | 使用函数的正确姿势 — zher，杭州图书馆 2019-01-06 日 16 时许 函数是一等公民 函数：一等的(first-</description>
    </item>
    
    <item>
      <title>『Go核心36讲』| 04 - 程序性能分析基础</title>
      <link>https://ijayer.github.io/post/tech/code/golang/tutorial-go36-04/</link>
      <pubDate>Tue, 18 Dec 2018 21:45:30 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/tutorial-go36-04/</guid>
      <description>性能分析，有哪些工具可以用？ 概要文件的采样、收集和输出是怎样的，包括怎样启动和停止采样、怎样设定采样频率以及怎样控制输出内容的格式和详细程度</description>
    </item>
    
    <item>
      <title>Golang | 语言机制之数据和语法的设计哲学</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20181212-go%E8%AF%AD%E8%A8%80%E6%9C%BA%E5%88%B6-04-%E6%95%B0%E6%8D%AE%E5%92%8C%E8%AF%AD%E6%B3%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%93%B2%E5%AD%A6/</link>
      <pubDate>Sun, 16 Dec 2018 17:25:00 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20181212-go%E8%AF%AD%E8%A8%80%E6%9C%BA%E5%88%B6-04-%E6%95%B0%E6%8D%AE%E5%92%8C%E8%AF%AD%E6%B3%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%93%B2%E5%AD%A6/</guid>
      <description>本系列文章总共四篇，主要帮助大家理解 Go 语言中一些语法结构和其背后的设计原则，包括指针、栈、堆、逃&amp;gt; 逸分析和值/指针传递。这是第二篇，主</description>
    </item>
    
    <item>
      <title>Golang | 语言机制之内存剖析</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20181212-go%E8%AF%AD%E8%A8%80%E6%9C%BA%E5%88%B6-03-%E5%86%85%E5%AD%98%E5%89%96%E6%9E%90/</link>
      <pubDate>Fri, 14 Dec 2018 10:24:56 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20181212-go%E8%AF%AD%E8%A8%80%E6%9C%BA%E5%88%B6-03-%E5%86%85%E5%AD%98%E5%89%96%E6%9E%90/</guid>
      <description>本系列文章总共四篇，主要帮助大家理解 Go 语言中一些语法结构和其背后的设计原则，包括指针、栈、堆、逃&amp;gt; 逸分析和值/指针传递。这是第二篇，主</description>
    </item>
    
    <item>
      <title>Golang | 语言机制之逃逸分析</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20181212-go%E8%AF%AD%E8%A8%80%E6%9C%BA%E5%88%B6-02-%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 12 Dec 2018 15:24:52 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20181212-go%E8%AF%AD%E8%A8%80%E6%9C%BA%E5%88%B6-02-%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/</guid>
      <description>本系列文章总共四篇，主要帮助大家理解 Go 语言中一些语法结构和其背后的设计原则，包括指针、栈、堆、逃&amp;gt; 逸分析和值/指针传递。这是第二篇，主</description>
    </item>
    
    <item>
      <title>Golang | 语言机制之栈和指针</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20181212-go%E8%AF%AD%E8%A8%80%E6%9C%BA%E5%88%B6-01-%E6%A0%88%E5%92%8C%E6%8C%87%E9%92%88/</link>
      <pubDate>Tue, 11 Dec 2018 17:24:40 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20181212-go%E8%AF%AD%E8%A8%80%E6%9C%BA%E5%88%B6-01-%E6%A0%88%E5%92%8C%E6%8C%87%E9%92%88/</guid>
      <description>本系列文章总共四篇，主要帮助大家理解 Go 语言中一些语法结构和其背后的设计原则，包括指针、栈、堆、逃&amp;gt; 逸分析和值/指针传递。这是第二篇，主</description>
    </item>
    
    <item>
      <title>『Go核心36讲』| 03 - Container 包中的那些容器</title>
      <link>https://ijayer.github.io/post/tech/code/golang/tutorial-go36-03/</link>
      <pubDate>Mon, 03 Dec 2018 14:02:03 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/tutorial-go36-03/</guid>
      <description>Six interesting containers in Golang From pkg/container container/list container/ring container/heap Built in map slice Channels as quenues Container Container — 容器数据类型：该包实现了三个复杂的数据结构：堆、链表、环 List Go 语言标准库的 container/list 代码包提供的对 链表 的实现。</description>
    </item>
    
    <item>
      <title>[转] Golang | Slice 深入理解</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20181121-slice-src-reading/</link>
      <pubDate>Wed, 21 Nov 2018 14:06:08 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20181121-slice-src-reading/</guid>
      <description>转自：深入解析 Go 中 Slice 底层实现 深入解析 Go 中 Slice 底层实现 切片是 Go 中的一种基本的数据结构，使用这种结构可以用来管理数据集合。切片的设计想法是由动态数</description>
    </item>
    
    <item>
      <title>Golang | Slice Deep Learning</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20181117-slice-deep-learning/</link>
      <pubDate>Sat, 17 Nov 2018 14:00:24 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20181117-slice-deep-learning/</guid>
      <description>Go Blog: Go slice internals 学习笔记 Slice internals A slice is a descriptor of an array segment. It consists of a pointer to the array, the length of the segment, and its capacity (the maximum length of the segment). 一个切片就是一个数组片段的描述符。它(切片)包含了一个指</description>
    </item>
    
    <item>
      <title>『Go核心36讲』| 02-数组与切片</title>
      <link>https://ijayer.github.io/post/tech/code/golang/tutorial-go36-02/</link>
      <pubDate>Sat, 17 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/tutorial-go36-02/</guid>
      <description>通过上 小结 学习主要加深了对：常用源码文件(命令、库、测试)写法、程序实体(常量、变量、结构体、函数、接口, 尤其是变量)以及相关的各种概念和编</description>
    </item>
    
    <item>
      <title>Tools | Useful Git Scripts</title>
      <link>https://ijayer.github.io/post/tech/tools/useful_git_scripts/</link>
      <pubDate>Sun, 04 Nov 2018 09:43:05 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/tools/useful_git_scripts/</guid>
      <description>Organize and collect useful git scripts gcp gcp =&amp;gt; add + commit + push + status 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/bin/sh set -e if [ 0 -eq $# ]; then echo &amp;#34;Usage: gcp &amp;lt;commit&amp;gt;&amp;#34; exit 1 fi git add -A git commit -m &amp;#34;$1&amp;#34; git push git status gta gta =&amp;gt; add tag and push to origin 1 2 3 4</description>
    </item>
    
    <item>
      <title>DevOps | 基于 Drone CI 部署 Go 语言项目 — Web Server</title>
      <link>https://ijayer.github.io/post/tech/devops/cicd/20181029-cicd-03-drone-03-practices2/</link>
      <pubDate>Mon, 29 Oct 2018 16:58:16 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/cicd/20181029-cicd-03-drone-03-practices2/</guid>
      <description>前面完成了基础设施搭建和测试，接下来就该将 Drone CI/CD 应用到项目中了。 这里涉及到的前几篇内容有： Drone 的基本概念 Drone 服务部署 Docker-Compose 基础 Docker Registry 服务部署 简介 这里以一</description>
    </item>
    
    <item>
      <title>Docker | Deploy Docker Registry and Web UI</title>
      <link>https://ijayer.github.io/post/tech/devops/docker/20181026-registry-and-webui/</link>
      <pubDate>Fri, 26 Oct 2018 09:48:45 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/docker/20181026-registry-and-webui/</guid>
      <description>背景：最近基于 Drone 搭建了用于公司内部使用的 CI/CD 平台，而 CI/CD 过程中生成的 Docker Image 需要能够进行集中式的存储和管理 (即：push、pull、delete 等)</description>
    </item>
    
    <item>
      <title>『心之所向，素履以往』— 张掖</title>
      <link>https://ijayer.github.io/post/footprint/20181002-%E5%BC%A0%E6%8E%96/</link>
      <pubDate>Tue, 02 Oct 2018 21:42:56 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/footprint/20181002-%E5%BC%A0%E6%8E%96/</guid>
      <description>列车跨马加鞭 绿洲划过一片 荒芜的戈壁滩 雪山绵延天边 — Zher，于 2018-10-02 日 09 时许，设备 S7 Edge</description>
    </item>
    
    <item>
      <title>《秋夜》</title>
      <link>https://ijayer.github.io/post/essay/20181001-poetry-%E7%A7%8B%E5%A4%9C/</link>
      <pubDate>Tue, 02 Oct 2018 21:18:24 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/essay/20181001-poetry-%E7%A7%8B%E5%A4%9C/</guid>
      <description>2018·10.1 假期，再归兰州，故友，往事，恰逢在那个秋夜&amp;hellip; 🌙 《秋夜》 北风寒 夜阑珊 秋意渐浓人见欢 饮酒小窗前 金城兰 似昨现 往事悠</description>
    </item>
    
    <item>
      <title>DevOps | Add an OAuth consumer(Application Links) to Bitbucket Server</title>
      <link>https://ijayer.github.io/post/tech/devops/cicd/20180929-cicd-05-create-oauth-app-on-bitbucket-server/</link>
      <pubDate>Sat, 29 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/cicd/20180929-cicd-05-create-oauth-app-on-bitbucket-server/</guid>
      <description>How to add an OAuth consumer(Application Links) to Bitbucket Server ? Create Application Links Step1: 打开 Create Application Links 页面 =&amp;gt; Continue Step2: 创建 Application Link =&amp;gt; Continue Step3: 填写表单 1 2 3 4 5 6 7 8 Application Name: Drone Application Type: 默认(Generic Application) Consumer Key: &amp;lt;_your_key_&amp;gt; Shared Secret: &amp;lt;_your_secret_&amp;gt; Request Token URL: http://&amp;lt;_domain_&amp;gt;:8000/plugins/servlet/oauth/request-token</description>
    </item>
    
    <item>
      <title>DevOps | Dockerizing Bitbucket Server &amp; Jira &amp; Confluence</title>
      <link>https://ijayer.github.io/post/tech/devops/cicd/20180927-cicd-04-dockerizing-bitbucketserver/</link>
      <pubDate>Thu, 27 Sep 2018 22:09:25 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/cicd/20180927-cicd-04-dockerizing-bitbucketserver/</guid>
      <description>基于 Docker 部署 Bitbucket Server 基于 Docker 部署 Jira 基于 Docker 部署 Confluence Dockerizing Bitbucket Server 部署 Bitbucket Server 需要两个 Docker 镜像：Bitbucket-Server &amp;amp; Postgre-DB 1 2 $ docker pull atlassian/bitbucket-server:5.10.2 $ docker pull postgres:9.6 在宿主机创建 Bitbucket Server</description>
    </item>
    
    <item>
      <title>DevOps | CI/CD 实践: Drone &#43; Docker &#43; Bitbucket Server 服务部署</title>
      <link>https://ijayer.github.io/post/tech/devops/cicd/20180926-cicd-03-drone-02-practices/</link>
      <pubDate>Wed, 26 Sep 2018 23:40:06 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/cicd/20180926-cicd-03-drone-02-practices/</guid>
      <description>经过几天的摸索之后，开始动手搭建一下 CI/CD 的环境吧！实践内容涉及： 怎么用 Docker 搭建 Bitbucket Server 怎么启动 Drone Service 实践过程中踩过那些坑 &amp;hellip;&amp;hellip; 说明 开始之前先了解一下实践环</description>
    </item>
    
    <item>
      <title>DevOps | Drone 的基本概念</title>
      <link>https://ijayer.github.io/post/tech/devops/cicd/20180925-cicd-03-drone-01-basic/</link>
      <pubDate>Tue, 25 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/cicd/20180925-cicd-03-drone-01-basic/</guid>
      <description>Drone 一个原生支持 Docker 的开源 CI 系统，基于 Go 编写。 Drone 的核心概念 Drone 的运作原理(架构) Drone 的基本术语 转自：GeekPipe-基于Drone的持续集成实践之</description>
    </item>
    
    <item>
      <title>Docker | Docker Compose 基础</title>
      <link>https://ijayer.github.io/post/tech/devops/docker/20180925-docker-compose-note/</link>
      <pubDate>Tue, 25 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/docker/20180925-docker-compose-note/</guid>
      <description>平时启动容器的时候，一般会使用 docker run 命令，但会遇到一种情况就是当一个项目需要启动多个容器的时，docker run 命令就显得不是很方便了。 为此 Docker 推出</description>
    </item>
    
    <item>
      <title>Win | 命令行集合</title>
      <link>https://ijayer.github.io/post/tech/os/win/cmd-usage-keep/</link>
      <pubDate>Mon, 24 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/os/win/cmd-usage-keep/</guid>
      <description>Windows 下命令行精选 快速启动命令行：Win + X + A 环境变量 设置临时环境变量，cmd 窗口关闭，则失效 1 $ set PATH=%PATH%;D:\code\bin\ 设置永久环境变量：添加到当前用户 1 $ setx /M</description>
    </item>
    
    <item>
      <title>让 Win 更好用的技巧</title>
      <link>https://ijayer.github.io/post/tech/os/win/used-better/</link>
      <pubDate>Mon, 24 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/os/win/used-better/</guid>
      <description>收藏一些让 Win 更好用的方法 Lenovo 屏蔽 Fn 键 安装 Lenovo 键盘驱动 (Google 搜索下载) 开始菜单打开该驱动程序，设置使用标准的F1-F12功能键 添加开机启动软件 Win + R Input:</description>
    </item>
    
    <item>
      <title>DevOps | CI/CD 方案调研笔记</title>
      <link>https://ijayer.github.io/post/tech/devops/cicd/20180919-cicd-02-search/</link>
      <pubDate>Wed, 19 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/cicd/20180919-cicd-02-search/</guid>
      <description>了解当下主流的 CI/CD 方案 开始之前 最近，项目节奏放缓，有了一定的空闲时间。所以呢，很早之前就想把 CI/CD 集成到现有项目中去的想法终于可以尝试一下了，同时</description>
    </item>
    
    <item>
      <title>DevOps | CI/CD 概念学习笔记</title>
      <link>https://ijayer.github.io/post/tech/devops/cicd/20180919-cicd-01-concepts/</link>
      <pubDate>Wed, 19 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/cicd/20180919-cicd-01-concepts/</guid>
      <description>持续集成 持续交付 持续部署 [转] 阮一峰：持续集成是什么？ 1. 概念 1.1. 持续集成 持续集成(CI, Continuous Intergation): 指频繁的，一天多次将代码集成到主干。 它的好处主要有</description>
    </item>
    
    <item>
      <title>Reading | Be worthy to read about career and work</title>
      <link>https://ijayer.github.io/post/career/be-worthy-to-read/</link>
      <pubDate>Wed, 19 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/career/be-worthy-to-read/</guid>
      <description>Include some articles that are very inspiring in your career and work. About Career 2019-04-17：“努力就会成功” —— 左耳朵耗子 在这样一个时代（第三次工业革命的信息化），我们要做的不是通过</description>
    </item>
    
    <item>
      <title>Golang | gRPC学习笔记-05 | 编码实践</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20180910-grpc-05-practice/</link>
      <pubDate>Mon, 10 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20180910-grpc-05-practice/</guid>
      <description>学习完了理论知识，开始写点 Demo 体验一番吧！ Sohoo！😋 Statement: 文章转载自 大桥下的蜗牛 =&amp;gt; 视频笔记：gRPC 从学习到生产 - Alan Shreve。 原文(英)：</description>
    </item>
    
    <item>
      <title>杭城 | 夕阳无限好</title>
      <link>https://ijayer.github.io/post/life/20180908-%E6%9D%AD%E5%9F%8E-%E5%A4%95%E9%98%B3%E6%97%A0%E9%99%90%E5%A5%BD/</link>
      <pubDate>Sat, 08 Sep 2018 15:54:21 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/life/20180908-%E6%9D%AD%E5%9F%8E-%E5%A4%95%E9%98%B3%E6%97%A0%E9%99%90%E5%A5%BD/</guid>
      <description>夕阳无限好 拍摄于 2018-09-08 日 18 时许，设备 S7Edge</description>
    </item>
    
    <item>
      <title>Golang | gRPC学习笔记-04 | 什么是 Protocol Buffers？</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20180907-grpc-04-what-is-protocol-buffers/</link>
      <pubDate>Fri, 07 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20180907-grpc-04-what-is-protocol-buffers/</guid>
      <description>上一小节，简单熟悉了一下 gRPC，接下来继续学习 Protocol Buffers 的相关知识： 什么是 Protocol Buffers ? .proto 文件怎么写？ -&amp;gt; 语言规范 .proto 文件写好了怎么用？ 本指南描述了怎样使用</description>
    </item>
    
    <item>
      <title>Golang | gRPC学习笔记-03 | 什么是 gRPC？</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20180906-grpc-03-what-is-grpc/</link>
      <pubDate>Thu, 06 Sep 2018 09:12:12 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20180906-grpc-03-what-is-grpc/</guid>
      <description>上一小节，简单熟悉了一下 RPC，接下来继续学习 gRPC 的基础概念： 什么是 gRPC ? gRPC 的关键概念有哪些 ? 在 gRPC 中，如何去定义一个服务 ？ gRPC 服务类型有哪几种？ 一</description>
    </item>
    
    <item>
      <title>Golang | gRPC学习笔记-02 | 什么是 RPC？</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20180905-grpc-02-what-is-rpc/</link>
      <pubDate>Thu, 06 Sep 2018 08:12:12 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20180905-grpc-02-what-is-rpc/</guid>
      <description>上一小节，简单熟悉了一下基于 gRPC 的 Hello World Demo 程序，接下来学习 gRPC 的相关概念知识，先来看 RPC: 什么是 RPC ? RPC 的核心概念有哪些？ RPC 是调用流程是怎么样的？ Statement: 文中</description>
    </item>
    
    <item>
      <title>Golang | gRPC学习笔记-01 | Hello World Demo</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20180904-grpc-01-helloworld/</link>
      <pubDate>Wed, 05 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20180904-grpc-01-helloworld/</guid>
      <description>Ok, 先来安装 gRPC 的开发环境，并且实践一下 Hello World 程序吧！ 1. 开发环境 ENV: go version go1.11 windows/amd64 IDE: goland 使用 gRPC 需要安装以下开发环境 Install gRPC (RPC框架) Install Protocol Buffers v3 (Google推</description>
    </item>
    
    <item>
      <title>Golang | gRPC 学习笔记集</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20180904-grpc-00/</link>
      <pubDate>Tue, 04 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20180904-grpc-00/</guid>
      <description>🙂 So, 开始学习 gRPC 啦！！！ 学习笔记，内容包括： Note1: gRPC | Hello Wrold Note2: gRPC基础概念 | 什么是 RPC? Note3: gRPC基础概念 | 什么是 gRPC? Note4: gRPC基础概念 | 什么是 Protocol Buffers? See</description>
    </item>
    
    <item>
      <title>Tools | Make &amp; Makefile 学习笔记 （一）</title>
      <link>https://ijayer.github.io/post/tech/tools/20180904-make-makefile-%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 04 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/tools/20180904-make-makefile-%E7%AC%94%E8%AE%B0/</guid>
      <description>Make 命令的简单用法 Makefile 的编写规则 Statements: 笔记的内容转自 阮一峰老师的 Make 命令教程 1. 前言 代码变成可执行文件，叫做 编译 (compile); 先编译这个，还是先编译那个(即编译的安</description>
    </item>
    
    <item>
      <title>『Go核心36讲』| 01-基础概念补漏</title>
      <link>https://ijayer.github.io/post/tech/code/golang/tutorial-go36-01/</link>
      <pubDate>Mon, 03 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/tutorial-go36-01/</guid>
      <description>这一节，主要跟着专栏第一章补漏一些必备的基础概念，内容概览： Go 中的源码文件分类 关于命令源码文件、库源码文件你漏掉了那些知识点？ 程序实体那些事</description>
    </item>
    
    <item>
      <title>Linux | Common Cmd</title>
      <link>https://ijayer.github.io/post/tech/os/linux/common-cmd/</link>
      <pubDate>Sun, 02 Sep 2018 17:53:01 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/os/linux/common-cmd/</guid>
      <description>系统管理 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # 查看系统内核版本号及系统名称 $ uname -a # 找出僵尸进程 $ ps aux | awk &amp;#39;{ print $8 &amp;#34; &amp;#34; $2 &amp;#34; &amp;#34; $11}&amp;#39; | grep</description>
    </item>
    
    <item>
      <title>『Go核心36讲』| 学习笔记集</title>
      <link>https://ijayer.github.io/post/tech/code/golang/tutorial-go36-00/</link>
      <pubDate>Sun, 02 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/tutorial-go36-00/</guid>
      <description>《Go语言核心36讲》 是郝林老师发布的一则专栏教程(付费)，以音频+文稿的方式系统的讲述了 Go 的知识。 我自己使用 Go 已经有两年时间了(从毕业到现</description>
    </item>
    
    <item>
      <title>Monitor | 基于 cAdvisor&#43;InfluxDB&#43;Grafana 搭建监控系统（二）| 监控平台数据持久化</title>
      <link>https://ijayer.github.io/post/tech/devops/monitor/20180830-persistent-monitoring-platform-data/</link>
      <pubDate>Thu, 30 Aug 2018 18:57:08 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/monitor/20180830-persistent-monitoring-platform-data/</guid>
      <description>背景说明 通常我们会采用本地持久存储卷来保存一些 Docker 容器服务的配置与数据，这样做的好处是配置与数据可以在容器主机上比较方便的进行修改、备份，因为</description>
    </item>
    
    <item>
      <title>Golang | 依赖管理-02：Go Modules 使用笔记</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20180828-feature-go-modules-02/</link>
      <pubDate>Wed, 29 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20180828-feature-go-modules-02/</guid>
      <description>Go1.11 新特性 — 依赖管理工具：Go Modules 使用过程学习笔记，内容包括: 如何在 新 的项目上使用 go modules 如何在 旧 的项目中引入 go modules Statement: 文中部分内容参考自网络博客(地址</description>
    </item>
    
    <item>
      <title>Golang | 依赖管理-01：Go Modules 初步了解和学习</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20180828-feature-go-modules-01/</link>
      <pubDate>Tue, 28 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20180828-feature-go-modules-01/</guid>
      <description>Go1.11 新特性 — 依赖管理工具：Go Modules 初步学习和使用笔记，内容包括: 简单了解下 Go Module 以及一些新概念 简单了解下 go mod 命令 1. Go Module Go1.11 添加了对版本化模块的初步支</description>
    </item>
    
    <item>
      <title>Web | 扩展知识-01-一些性能测试指标概念</title>
      <link>https://ijayer.github.io/post/tech/web/20180826-web%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86-01-%E4%B8%80%E4%BA%9B%E6%8C%87%E6%A0%87%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Sun, 26 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/web/20180826-web%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86-01-%E4%B8%80%E4%BA%9B%E6%8C%87%E6%A0%87%E6%A6%82%E5%BF%B5/</guid>
      <description>学习笔记：了解 Web 服务性能测试和压力测试中常见概念：QPS、TPS、RT、PV、VV、UV、吞吐率、吞吐量等等&amp;hellip; 1. 网站的 PV、V</description>
    </item>
    
    <item>
      <title>Golang | 理解 Golang 的 nil (转)</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20180822-advanced-%E7%90%86%E8%A7%A3golang%E7%9A%84nil/</link>
      <pubDate>Wed, 22 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20180822-advanced-%E7%90%86%E8%A7%A3golang%E7%9A%84nil/</guid>
      <description>理解 nil nil 是什么？ nil 在 Go 中又是什么？ nil 意味着什么？ nil 有用吗？ 我们常常会把 nil 拼写成 null, 学过 C 的同学肯定听过这个 null 符号，甚至某些让人痛恨的同学还故意</description>
    </item>
    
    <item>
      <title>杭城 | 黄昏夜幕时</title>
      <link>https://ijayer.github.io/post/life/20180818-%E6%9D%AD%E5%9F%8E-twilight-night/</link>
      <pubDate>Sun, 19 Aug 2018 16:41:56 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/life/20180818-%E6%9D%AD%E5%9F%8E-twilight-night/</guid>
      <description>生活就是一点一滴，记录过的才是美好&amp;hellip; 比如， 夜跑小记 黄昏时分 夜幕之下 拍摄于 2018-08-18 日傍晚 19 时许，设备 S7Edge</description>
    </item>
    
    <item>
      <title>博客搭建-04 让.github.io出现在Google搜索中</title>
      <link>https://ijayer.github.io/post/others/20180814-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-04-%E8%AE%A9.github.io%E5%87%BA%E7%8E%B0%E5%9C%A8google%E6%90%9C%E7%B4%A2%E4%B8%AD/</link>
      <pubDate>Tue, 14 Aug 2018 13:38:03 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/others/20180814-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-04-%E8%AE%A9.github.io%E5%87%BA%E7%8E%B0%E5%9C%A8google%E6%90%9C%E7%B4%A2%E4%B8%AD/</guid>
      <description>如何让博客内容出现在 Google 🔍 中呢？？？ Google Search Console 可在 Google 搜索地址栏输入：site:http://xxxx.github.io 查看该域名是否被 Google 收录 Google Search</description>
    </item>
    
    <item>
      <title>博客搭建-03 HugoServer注册为Win服务</title>
      <link>https://ijayer.github.io/post/others/20180813-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-03-hugoserver%E6%B3%A8%E5%86%8C%E4%B8%BAwin%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Mon, 13 Aug 2018 22:05:21 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/others/20180813-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-03-hugoserver%E6%B3%A8%E5%86%8C%E4%B8%BAwin%E6%9C%8D%E5%8A%A1/</guid>
      <description>WinSW: 把 win 下的命令行程序包装为 service 运行 Install Install doc click here Config 以配置 win 平台下的 hugo server 为例：运行 Git Bash, 执行如下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #</description>
    </item>
    
    <item>
      <title>博客搭建-02 GitHub Pages托管和部署</title>
      <link>https://ijayer.github.io/post/others/20180813-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-02-github-pages%E6%89%98%E7%AE%A1%E5%92%8C%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Mon, 13 Aug 2018 22:04:38 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/others/20180813-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-02-github-pages%E6%89%98%E7%AE%A1%E5%92%8C%E9%83%A8%E7%BD%B2/</guid>
      <description>将 Hugo 生成的网站部署和托管到 GitHub Pages GitHub 上的托管和部署 Github Pages 是 Github 推出的一项功能，可以免费托管静态网站，将你的静态文件放在仓库里，然后在仓库的 Settings 里面，翻</description>
    </item>
    
    <item>
      <title>博客搭建-01 Hugo安装和使用</title>
      <link>https://ijayer.github.io/post/others/20180813-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-01-hugo%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 13 Aug 2018 22:03:40 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/others/20180813-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-01-hugo%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</guid>
      <description>准备一些需要用的工具和软件： Hugo: 静态网站生成工具，用来编译静态网站的, 输出在：public 目录 GitHub: 用来部署和托管网站，网站仓库：username</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://ijayer.github.io/about/</link>
      <pubDate>Mon, 13 Aug 2018 09:28:20 +0800</pubDate>
      
      <guid>https://ijayer.github.io/about/</guid>
      <description>Have a nice day!</description>
    </item>
    
    <item>
      <title>Tools | Git Submodule 学习笔记</title>
      <link>https://ijayer.github.io/post/tech/tools/20180806-git-submodule-learn/</link>
      <pubDate>Mon, 06 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/tools/20180806-git-submodule-learn/</guid>
      <description>什么是 Git 子模块 Git 子模块怎么用 1. Git submodule 命令用法 git submodule 命令用于初始化，更新或检查子模块。 1 2 3 4 5 6 7 8 usage: git submodule [--quiet] add [-b &amp;lt;branch&amp;gt;] [-f|--force] [--name &amp;lt;name&amp;gt;] [--reference &amp;lt;repository&amp;gt;] [--] &amp;lt;repository&amp;gt; [&amp;lt;path&amp;gt;] or: git submodule [--quiet] status [--cached] [--recursive]</description>
    </item>
    
    <item>
      <title>Monitor | Grafana 使用</title>
      <link>https://ijayer.github.io/post/tech/devops/monitor/grafana-03-practice/</link>
      <pubDate>Sun, 05 Aug 2018 17:32:41 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/monitor/grafana-03-practice/</guid>
      <description>要让 Grafana 展示我们采集到的数据，就需要对其进行一些列配置，配置说明如下： 添加数据源(InfluxDB) 添加InfluxDB数据源相关的配置: Name: 添</description>
    </item>
    
    <item>
      <title>Monitor | 基于 cAdvisor&#43;InfluxDB&#43;Grafana 搭建监控系统</title>
      <link>https://ijayer.github.io/post/tech/devops/monitor/20180729-deploy-a-monitor-service-based-on-with-cadvisor-grafana-influxdb/</link>
      <pubDate>Sun, 29 Jul 2018 18:57:08 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/monitor/20180729-deploy-a-monitor-service-based-on-with-cadvisor-grafana-influxdb/</guid>
      <description>Docker 监控系统说明 系统说明 1 2 3 CentOS: 7.4 | X86_64 Docker: 18.06 | CE Monitor: 基于 docker 容器搭建监控系统 Docker 监控组件 1 2 3 cAdvisor: 用于数据采集, 对应镜像：google/cadvisor</description>
    </item>
    
    <item>
      <title>InfluxDB | 入门指南</title>
      <link>https://ijayer.github.io/post/tech/db/influxdb/02-getting-started/</link>
      <pubDate>Sun, 29 Jul 2018 17:46:58 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/db/influxdb/02-getting-started/</guid>
      <description>通过命令行工具 influx 完成数据库的创建和读写练习 入门指南 这部分内容主要通过 influx (CLI) 工具操作 influxdb 数据库，即：创建数据库和读写数据。 说明：也可以直接发送裸的</description>
    </item>
    
    <item>
      <title>InfluxDB | 基础知识</title>
      <link>https://ijayer.github.io/post/tech/db/influxdb/01-basic-concepts/</link>
      <pubDate>Thu, 26 Jul 2018 17:46:58 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/db/influxdb/01-basic-concepts/</guid>
      <description>InfluxDB 初步了解及安装使用 简介 InfluxDB On GitHub | Influxdb Docs InfluxDB, 一个开源的时序数据库(Time Series Database), 对记录指标、事件和性能分析非常有用，无外部依赖(Go Coding) 特点 无结构(无</description>
    </item>
    
    <item>
      <title>Monitor | Grafana 配置</title>
      <link>https://ijayer.github.io/post/tech/devops/monitor/grafana-02-config/</link>
      <pubDate>Sun, 22 Jul 2018 17:22:38 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/monitor/grafana-02-config/</guid>
      <description>每个服务程序，基本上都会指定一个或多个配置文件，用来定制其所要启用的功能，Grafana 也不例外，那么 Grafana 的配置文件有哪些，以及提供了什么样的</description>
    </item>
    
    <item>
      <title>Monitor | Grafana 基础</title>
      <link>https://ijayer.github.io/post/tech/devops/monitor/grafana-01-basic-concepts/</link>
      <pubDate>Sun, 22 Jul 2018 17:02:38 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/monitor/grafana-01-basic-concepts/</guid>
      <description>Grafana 能干什么？ Grafana 有什么特性？ 用好 Grafana, 需要了解什么，即-基本概念 Grafana Grafana 是一款采用 Go 语言编写的开源应用，主要用于大规模指标数据的可视化展示。有着非常漂</description>
    </item>
    
    <item>
      <title>Monitor | cAdvisor 采集的 Measurements</title>
      <link>https://ijayer.github.io/post/tech/devops/monitor/cadvisor-02-measurements/</link>
      <pubDate>Sat, 21 Jul 2018 16:37:21 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/monitor/cadvisor-02-measurements/</guid>
      <description>cAdvisor 作为监控系统的数据采集模块，那么可以采集到那些指标参数呢？ Measurements 打开 InfluxDB Web 管理界面，选择数据库：cadvisor, 执行命令： 1 Query: SHOW MEASUREMENTS 即可看到 cAdvisor 采</description>
    </item>
    
    <item>
      <title>Monitor | cAdvisor 基础</title>
      <link>https://ijayer.github.io/post/tech/devops/monitor/cadvisor-01-basic-concepts/</link>
      <pubDate>Sat, 21 Jul 2018 16:36:59 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/monitor/cadvisor-01-basic-concepts/</guid>
      <description>有关 cAdvisor 的基础知识、安装和使用方法介绍 1. cAdvisor cAdvisor 是 Google 用来让容器用户了解其所运行容器的资源使用和性能特征的工具。cAdvisor 是一个用来收集、聚合</description>
    </item>
    
    <item>
      <title>Monitor | 关于监控系统的相关知识</title>
      <link>https://ijayer.github.io/post/tech/devops/monitor/about-monitor-system/</link>
      <pubDate>Wed, 18 Jul 2018 18:57:08 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/monitor/about-monitor-system/</guid>
      <description>1. 关于监控 监控就是要把一切尽在掌控 1.1. 监控的目的 通过监控可以： 实时掌握系统的运行状态 减少宕机时间 对故障的提前预警 历史状态的回放、故障排除、分析</description>
    </item>
    
    <item>
      <title>Golang | Pits =&gt; Concurrent access map</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20180718-concurrent-access-map-pits/</link>
      <pubDate>Wed, 18 Jul 2018 14:09:26 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20180718-concurrent-access-map-pits/</guid>
      <description>Issue: 为什么 map 并发不安全，读也不安全吗？ 代码测试 单个 goroutine 读写 map 的 Demo: 结论：正常 多个 goroutine 只写 的 Demo： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24</description>
    </item>
    
    <item>
      <title>Golang | Step-by-step guide to concurrency 学习笔记</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20180701-tutorial_step-by-step-guide-to-concurrency/</link>
      <pubDate>Sun, 01 Jul 2018 14:09:26 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20180701-tutorial_step-by-step-guide-to-concurrency/</guid>
      <description>原文：Step-by-step guide to concurrency 参考：Go并发编程基础（译） 内容涵盖： 运行期并发线程(goroutines) 基本的同步技术(通道和锁) G</description>
    </item>
    
    <item>
      <title>Golang | cmd - go cgo</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20180629-go_cmd_03_cgo/</link>
      <pubDate>Fri, 29 Jun 2018 14:09:26 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20180629-go_cmd_03_cgo/</guid>
      <description>Cgo 支持创建调用 C 代码的 Go 包 通过 go 命令使用 cgo 为了使用 cgo, 你需要在普通的 Go 代码中导入一个 伪包 &amp;quot;C&amp;quot;。这样 Go 代码就可以引用一些 C</description>
    </item>
    
    <item>
      <title>Golang | cmd - go install | run | clean | env | get</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20180627-go_cmd_02_install_run_clean_env_get/</link>
      <pubDate>Wed, 27 Jun 2018 14:09:26 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20180627-go_cmd_02_install_run_clean_env_get/</guid>
      <description>go install go run go clean go env go get 目录 go install go run go clean go env go get See Also go install 完成两步操作： 第一步是生成结果文件(可执行文件或.a文件) 第二步是把编译好的结果文件移到</description>
    </item>
    
    <item>
      <title>Golang | cmd - go build 构建 C 的静态 &#43; 动态链接库、Go 的动态链接库</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20180625-go_cmd_01_3_go-build_c-archive_c-shared_go-shared/</link>
      <pubDate>Mon, 25 Jun 2018 14:09:26 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20180625-go_cmd_01_3_go-build_c-archive_c-shared_go-shared/</guid>
      <description>Go 中如何构建 C 的静态链接库 Go 中如何构建 C 的动态链接库 Go 中如何构建 Go 的动态链接库 目录 c-archive c-shared 为什么会需要动态链接库 shared See Also c-archive 这里构建的是供 C 程序调用</description>
    </item>
    
    <item>
      <title>Golang | cmd - go build 构建模式</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20180624-go_cmd_01_2_go-build-mode/</link>
      <pubDate>Sun, 24 Jun 2018 14:07:26 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20180624-go_cmd_01_2_go-build-mode/</guid>
      <description>build modes The &amp;lsquo;go build&amp;rsquo; and &amp;lsquo;go install&amp;rsquo; commands take a -buildmode argument which indicates which kind of object file is to be built. Currently supported values are: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 -buildmode=archive Build the listed</description>
    </item>
    
    <item>
      <title>Golang | cmd - go build 构建约束</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20180623-go_cmd_01_1_go-build-constraint/</link>
      <pubDate>Sat, 23 Jun 2018 14:04:26 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20180623-go_cmd_01_1_go-build-constraint/</guid>
      <description>Build Constraints(约束) Build -tags A build constraint, also known as a build tag, is a line comment that begins 1 // +build that lists the conditions under which a file should be included in the package. Constraints may appear in any kind of source file (not just Go), but they must appear near the top of</description>
    </item>
    
    <item>
      <title>Golang | Performance Optimization =&gt; go tarch 学习笔记</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20180620-performance-optimization-04-go-torch/</link>
      <pubDate>Tue, 19 Jun 2018 13:48:02 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20180620-performance-optimization-04-go-torch/</guid>
      <description>go tarch（火焰图）学习笔记 火焰图(Flame Graph) 火焰图 也是性能分析的利器。最初是由 Netflix 的 Brendan Gregg 发明并推广的。 图片来自：blog.lab99.o</description>
    </item>
    
    <item>
      <title>Golang | Performance Optimization =&gt; 优化建议</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20180619-performance-optimization-05-experience/</link>
      <pubDate>Tue, 19 Jun 2018 13:48:02 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20180619-performance-optimization-05-experience/</guid>
      <description>转自：Debugging performance issues in Go programs 1. 将多个小对象合并成一个大对象 2. 减少不必要的指针简介引用，多使用 copy 引用 例如使用 bytes.Buffer 代替 *bytes.Buffer, 因为使用指针时会分配</description>
    </item>
    
    <item>
      <title>Golang | Performance Optimization =&gt; pprof practice</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20180615-performance-optimization-03-pprof-practice/</link>
      <pubDate>Fri, 15 Jun 2018 13:48:02 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20180615-performance-optimization-03-pprof-practice/</guid>
      <description>pprof 小练习 实践练习项目：Golang profiling and optimizing 注册自定义的 pprof 接口(基于httprouter) 注册接口函数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // 使用自定义</description>
    </item>
    
    <item>
      <title>Golang | Stdlib - runtime</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20180610-stdlib-runtime/</link>
      <pubDate>Sun, 10 Jun 2018 16:07:43 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20180610-stdlib-runtime/</guid>
      <description>了解 runtime 包中的的环境变量 了解 runtime 包中的基本函数及使用 目录 1. 概述 2. 环境变量 2.1. GOGC 2.2. GODEBUG 2.3. GOMAXPROCS 2.4. GOTRACEBACK 2.5. GOARCH、GOOS、GOPATH、GOROOT 3. 基</description>
    </item>
    
    <item>
      <title>Golang | Performance Optimization =&gt; pprof</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20180606-performance-optimization-02-pprof-usage/</link>
      <pubDate>Wed, 06 Jun 2018 13:48:02 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20180606-performance-optimization-02-pprof-usage/</guid>
      <description>go tool pprof 用法 cpu、goroutine、heap 分析方法 pprof Pprof 是一款可视化的性能分析工具，源自 Google Performance Tools 工具集。用于确定程序运行过程中CPU和内存的</description>
    </item>
    
    <item>
      <title>Golang | 程序性能优化学习笔记</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20180605-performance-optimization-01-introduction/</link>
      <pubDate>Tue, 05 Jun 2018 13:48:02 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20180605-performance-optimization-01-introduction/</guid>
      <description>程序优化有哪些方式和步骤？ 可供选择的调优工具有哪些？ 调优之前 如何做Go的性能优化？ 调优方式 要监控程序性能，有下面几种方式： Timers: 计时器，用于基准</description>
    </item>
    
    <item>
      <title>杭城 | 篮球</title>
      <link>https://ijayer.github.io/post/life/20180602-%E6%9D%AD%E5%9F%8E-%E7%AF%AE%E7%90%83/</link>
      <pubDate>Sat, 02 Jun 2018 15:55:24 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/life/20180602-%E6%9D%AD%E5%9F%8E-%E7%AF%AE%E7%90%83/</guid>
      <description>拍摄于 2018-06-02 日傍晚 19 时许，设备 S7Edge</description>
    </item>
    
    <item>
      <title>Linux | Tools | top &amp; htop</title>
      <link>https://ijayer.github.io/post/tech/os/linux/20180529-tools-htop/</link>
      <pubDate>Tue, 29 May 2018 17:53:01 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/os/linux/20180529-tools-htop/</guid>
      <description>top top 命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用情况，类似win的任务管理器。 top 是一个动态显示过程，即可以通过</description>
    </item>
    
    <item>
      <title>『心之所向，素履以往』— 千岛湖</title>
      <link>https://ijayer.github.io/post/footprint/20180520-%E5%8D%83%E5%B2%9B%E6%B9%96/</link>
      <pubDate>Sun, 20 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/footprint/20180520-%E5%8D%83%E5%B2%9B%E6%B9%96/</guid>
      <description>逃离去往小岛 偷闲一段时光 ... ” 许个心愿：期待下次能和心爱的人儿一起再次驻足那片土地，邂逅在湖边的午后&amp;hellip; 微风拂面，秀发飘扬&amp;hel</description>
    </item>
    
    <item>
      <title>Linux | Tools | Logrotate 使用总结</title>
      <link>https://ijayer.github.io/post/tech/os/linux/20180511-tools-logrotate/</link>
      <pubDate>Fri, 11 May 2018 17:53:01 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/os/linux/20180511-tools-logrotate/</guid>
      <description>日志实在是太有用了，它记录了程序运行时各种信息。通过日志可以分析用户行为，记录运行轨迹，查找程序问题。可惜磁盘的空间是有限的，就像飞机里的黑</description>
    </item>
    
    <item>
      <title>MongoDB | 使用 logrotate 管理日志</title>
      <link>https://ijayer.github.io/post/tech/db/mongodb/20180511-use-logrotate-to-manage-logs/</link>
      <pubDate>Fri, 11 May 2018 15:53:01 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/db/mongodb/20180511-use-logrotate-to-manage-logs/</guid>
      <description>记一次日志引起的故障：服务器 mongod 日志出现暴增，一天增加了 7+G 之多&amp;hellip; Why? 问题现象 内网测试服务器出现了日志暴增的现象，日志描述如下： 1 2</description>
    </item>
    
    <item>
      <title>Nginx | 学习笔记</title>
      <link>https://ijayer.github.io/post/tech/web/20180424-nginx-learning-notes/</link>
      <pubDate>Tue, 24 Apr 2018 17:53:01 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/web/20180424-nginx-learning-notes/</guid>
      <description>Nginx？ 1 2 3 4 Who? 俄罗斯人开发 What? 十分轻量级的HTTP服务器, &amp;#39;engine X&amp;#39; How? 高性能、模块丰富、配置灵活、低消耗 Why? 基于事件驱动方式编写 Nginx 有那些功能？</description>
    </item>
    
    <item>
      <title>杭州 | 夜游京杭运河</title>
      <link>https://ijayer.github.io/post/life/20180421-%E6%9D%AD%E5%9F%8E-%E5%A4%9C%E6%B8%B8%E4%BA%AC%E6%9D%AD%E8%BF%90%E6%B2%B3/</link>
      <pubDate>Sat, 21 Apr 2018 21:29:56 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/life/20180421-%E6%9D%AD%E5%9F%8E-%E5%A4%9C%E6%B8%B8%E4%BA%AC%E6%9D%AD%E8%BF%90%E6%B2%B3/</guid>
      <description>我拿起酒杯对自己说: 一杯敬朝阳，一杯敬月光 一杯敬明天，一杯敬过往 拍摄于 2018-04-21 日傍晚 20 时许，设备 S7Edge</description>
    </item>
    
    <item>
      <title>Golang | 关于 for range 的一些细节</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20180328-%E5%85%B3%E4%BA%8E_for-range_%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</link>
      <pubDate>Wed, 28 Mar 2018 13:48:02 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20180328-%E5%85%B3%E4%BA%8E_for-range_%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</guid>
      <description>for range 的迭代变量会被重用 range expression 的副本参与 iteration 1. iteration variable 重用 for range 的 idiomatic(惯用)使用方式是使用 short variable declaration(:=) 形式在 for expression 中声明 iteration variable，但需</description>
    </item>
    
    <item>
      <title>Golang | net/http =&gt; Customize Handler、ServeMux、Middleware</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20180320_net-http_02_customize-handler&#43;servemux&#43;middleware/</link>
      <pubDate>Tue, 20 Mar 2018 16:07:43 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20180320_net-http_02_customize-handler&#43;servemux&#43;middleware/</guid>
      <description>怎么定义 Handler？ 怎么定义 Server？ 怎么定义 Middleware？ 如何用？ 目录 自定义 Handler 自定义 Server 中间件 Middleware See Also 自定义 Handler 标准库http提</description>
    </item>
    
    <item>
      <title>Golang | net/http =&gt; server.go 源码阅读</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20180316_net-http_01_reading-server.go/</link>
      <pubDate>Fri, 16 Mar 2018 16:07:43 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20180316_net-http_01_reading-server.go/</guid>
      <description>src/net/http/server.go ResponseWriter ? Handler ? ServerMux ? Server ? 目录 HTTP HTTP处理流程 几个重要接口或结构 文中的几个重要约定 Handler ServeMux ServeMux 提供的方法 Server 创建 HTTP 服务 注册路由 服务监听 处理请求 总结 http</description>
    </item>
    
    <item>
      <title>Golang | 定时任务</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20180307-lib-cron-learn-note/</link>
      <pubDate>Wed, 07 Mar 2018 16:07:43 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20180307-lib-cron-learn-note/</guid>
      <description>Cron go get github.com/robfig/cron cron(定时任务): 按照约定的时间，定时的执行特定的任务（job），cron 表达式表达了这种约定。 cron表达式格式 格式1 cron 表达式</description>
    </item>
    
    <item>
      <title>杭州 | 雨后的清晨</title>
      <link>https://ijayer.github.io/post/life/20180303-%E6%9D%AD%E5%9F%8E-%E9%9B%A8%E5%90%8E%E7%9A%84%E6%B8%85%E6%99%A8/</link>
      <pubDate>Sat, 03 Mar 2018 16:46:59 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/life/20180303-%E6%9D%AD%E5%9F%8E-%E9%9B%A8%E5%90%8E%E7%9A%84%E6%B8%85%E6%99%A8/</guid>
      <description>那一天的清晨，天空刚下完雨 拍摄于 2018-03-03 日晨 07 时许，设备 S7Edge</description>
    </item>
    
    <item>
      <title>古城 | 过客</title>
      <link>https://ijayer.github.io/post/life/20180224-%E5%8F%A4%E5%9F%8E-%E5%8C%86%E5%8C%86/</link>
      <pubDate>Sat, 24 Feb 2018 16:59:10 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/life/20180224-%E5%8F%A4%E5%9F%8E-%E5%8C%86%E5%8C%86/</guid>
      <description>归杭的旅途已是彼时的路 途中的风景散落记忆深处 犹如时光里划过的水墨画 匆匆脚尖 丝丝印记 你在追 我在跑 ![](https://res.cloudinary.com/zher-files/image/upload/v1537693377/blog/photos/mmexport1537693322932.jpg) ![](https://res.cloudinary.com/zher-files/image/upload/v1537693376/blog/photos/mmexport1537693320067.jpg) ![](https://res.cloudinary.com/zher-files/image/upload/v1537693377/blog/photos/mmexport1537693328289.jpg) ![](https://res.cloudinary.com/zher-files/image/upload/v1537693377/blog/photos/mmexport1537693317141.jpg) 拍摄于 2018-02-24 日傍晚 17 时许，设备 S7Edge</description>
    </item>
    
    <item>
      <title>《归乡·北方》</title>
      <link>https://ijayer.github.io/post/essay/20180209-poetry-%E5%BD%92%E4%B9%A1%E5%8C%97%E6%96%B9/</link>
      <pubDate>Fri, 09 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/essay/20180209-poetry-%E5%BD%92%E4%B9%A1%E5%8C%97%E6%96%B9/</guid>
      <description>2018·春节： 归途，夜难宿、即兴起、诗一首，勉之 🌙 — Zher，于 2018-02-09 日凌晨 01 时许</description>
    </item>
    
    <item>
      <title>Golang | mgo - Rich MongoDB Driver for Go [译]</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20180127-lib-mgo/</link>
      <pubDate>Sat, 27 Jan 2018 16:07:43 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20180127-lib-mgo/</guid>
      <description>译：Rich MongoDB Driver for Go 目录 1. Highlights(强调) 1.1. Cluster discovery and communication(集群发现和通信) 1.2. Failover management(故障转移</description>
    </item>
    
    <item>
      <title>Golang | 单元测试</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20171113-go-unit-test/</link>
      <pubDate>Mon, 13 Nov 2017 16:07:43 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20171113-go-unit-test/</guid>
      <description>单元测试 单元测试基础 Go单元测试采用内置的测试框架，通过引入 testing 包以及 go test 命令来提供测试功能 testing 包专门用来进行自动化测试，日志和错误报告，且包含</description>
    </item>
    
    <item>
      <title>Golang | CGO =&gt; 基础 </title>
      <link>https://ijayer.github.io/post/tech/code/golang/20171023-cgo-note/</link>
      <pubDate>Mon, 23 Oct 2017 16:07:43 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20171023-cgo-note/</guid>
      <description>《深入 CGO 编程》 学习笔记 最简单的CGO程序 hello cgo 1 2 3 4 5 import &amp;#34;C&amp;#34; func main() { println(&amp;#34;hello cgo&amp;#34;) } 代码通过 import &amp;quot;C&amp;quot; 语句启用 CGO 特性，主函数只是通过 Go 内置的 println 函数输出字符串，其</description>
    </item>
    
    <item>
      <title>Golang | 函数</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20171013-go-func/</link>
      <pubDate>Fri, 13 Oct 2017 16:07:43 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20171013-go-func/</guid>
      <description>函数 函数签名：函数参数列表 + 函数返回值 func(i int, s string) string 签名为：func(int, string) string 多返回值 标准库中的函数通常返回2个值，一个是期望得到的返回值，</description>
    </item>
    
    <item>
      <title>Golang | 模板</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20171010-go-template/</link>
      <pubDate>Tue, 10 Oct 2017 16:07:43 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20171010-go-template/</guid>
      <description>什么是模板 Go中模板处理通过包: text/template 和 html/template 完成 一个模板就是一个字符串或一个文件，里面包含了一个或多个双花括号 {{}} 包含的对象 Go中模板解析 Go中模板</description>
    </item>
    
    <item>
      <title>『心之所向，素履以往』— 黄山</title>
      <link>https://ijayer.github.io/post/footprint/20171006-%E9%BB%84%E5%B1%B1/</link>
      <pubDate>Fri, 06 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/footprint/20171006-%E9%BB%84%E5%B1%B1/</guid>
      <description>山，不役于物，不伤于物，任万灵滋长于上，不惧不动，万古恒长。故，仁者乐山。 日出 🌅 云海 ⛅ 奇松 🎄 怪石 野营 🏕 光明顶 当然&amp;hellip; 还要有美女&amp;</description>
    </item>
    
    <item>
      <title>Network | 计算机网络基础</title>
      <link>https://ijayer.github.io/post/tech/network/20170926-net-basic/</link>
      <pubDate>Tue, 26 Sep 2017 17:53:01 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/network/20170926-net-basic/</guid>
      <description>计算机网络的核心内容就是网络协议学习。 网络硬件 网络传输技术：广播式链路和点到点链路 单播：即点到点链路，在点到点传输中只有一个发送方和接收方 广</description>
    </item>
    
    <item>
      <title>Docker | 跨主机通信</title>
      <link>https://ijayer.github.io/post/tech/devops/docker/20170919-%E8%B7%A8%E4%B8%BB%E6%9C%BA%E9%80%9A%E4%BF%A1/</link>
      <pubDate>Tue, 19 Sep 2017 16:39:25 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/docker/20170919-%E8%B7%A8%E4%B8%BB%E6%9C%BA%E9%80%9A%E4%BF%A1/</guid>
      <description>相关知识 Overlay Network？ An overlay network is a computer network that is built on top of another network. 覆盖网络，是一个建立在另一个网络上的计算机网络。覆盖网络中的节点被认为是通过虚拟或逻</description>
    </item>
    
    <item>
      <title>Linux | Fedora 系统优化</title>
      <link>https://ijayer.github.io/post/tech/os/linux/20170915-linux.fedora-notes/</link>
      <pubDate>Fri, 15 Sep 2017 17:53:01 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/os/linux/20170915-linux.fedora-notes/</guid>
      <description>Chrome http://www.itzgeek.com/how-tos/linux/centos-how-tos/how-to-run-google-chrome-as-root-fedora-16-centos-6-rhel-6.html Download &amp;amp; Install Entry /usr/share/applications Select chrome icon Right key Add -no-sandbox to startup command old: /usr/bin/google-chrome-stable %U new: /usr/bin/google-chrome-stable %U -no-sandbox Finished &amp;amp; Start Chrome. OK! Enjoy it. Go、Golang Download &amp;amp; Install Open In Termianl http://www.fedora.cc/fedora-zhongduan-1.html yum -y install nautilus-open-terminal reboot Install Lantern Linux系统提供一个软件ali</description>
    </item>
    
    <item>
      <title>Golang | SFTP</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20170808-lib-sftp/</link>
      <pubDate>Tue, 08 Aug 2017 16:07:43 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20170808-lib-sftp/</guid>
      <description>SFTP 用于远程传输文件；基于SSH协议设计，所以传输文件前首先要建立SSH连接，在 Golang | SSH Note 有关于SSH包的使用笔记，同时，使用SSH也可以完成远</description>
    </item>
    
    <item>
      <title>Golang | SSH</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20170807-lib-ssh/</link>
      <pubDate>Mon, 07 Aug 2017 16:07:43 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20170807-lib-ssh/</guid>
      <description>SSH 简介 https://godoc.org/golang.org/x/crypto/ssh SSH 客户端 工作流程 Linux SSH Work Flow: execute: ssh root@host:ip input: pwd hosted remote shell: execute command 同理，通过 Golang 的 SSH 包提供的函数也要实现上述流程： Input command by keyboard Obtain user&amp;rsquo;s input from os.Stdin Establish a ssh connect Send data|cmd by ssh 获取标准</description>
    </item>
    
    <item>
      <title>Golang | Stdlib: Flag 学习笔记</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20180912-stdlib-flag/</link>
      <pubDate>Tue, 25 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20180912-stdlib-flag/</guid>
      <description>flag 包学习笔记概要： 如何定义命令行参数，即 flags ？ flags 解析规则及语法格式 ？ flag 包有哪些重要的变量、函数以及类型 ？ 如何绑定用户自定义的数据类型作为参数值</description>
    </item>
    
    <item>
      <title>Tools | Git 学习笔记</title>
      <link>https://ijayer.github.io/post/tech/tools/20170721-git-learn/</link>
      <pubDate>Fri, 21 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/tools/20170721-git-learn/</guid>
      <description>1. 获取仓库 1.1. 新建仓库 仓库：respository，可理解为一个目录，该目录下所有文件都可被Git管理。 创建文件夹，打开，执行下面命令创建新仓</description>
    </item>
    
    <item>
      <title>Docker | 容器配置静态 IP</title>
      <link>https://ijayer.github.io/post/tech/devops/docker/20170713-%E5%AE%B9%E5%99%A8%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip/</link>
      <pubDate>Thu, 13 Jul 2017 16:39:25 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/docker/20170713-%E5%AE%B9%E5%99%A8%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip/</guid>
      <description>方式一：Pipework 借助pipework实现，容器重启后 IP 需要重新配置。 Pipework简介 Software-Defined Networking for Linux Containers(SDN). Pipework是一个Docker</description>
    </item>
    
    <item>
      <title>Docker | FAQ</title>
      <link>https://ijayer.github.io/post/tech/devops/docker/faq/</link>
      <pubDate>Tue, 11 Jul 2017 16:39:25 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/docker/faq/</guid>
      <description>Docker 使用过程中经常遇到的问题备忘 Q1: 基于Alpine构建的Docker镜像出现时间和宿主时间不同步问题，时区设置有问题 Alpine默认时区·UT</description>
    </item>
    
    <item>
      <title>Docker | 私有仓库搭建</title>
      <link>https://ijayer.github.io/post/tech/devops/docker/20170704-%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Tue, 04 Jul 2017 16:39:25 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/docker/20170704-%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E6%90%AD%E5%BB%BA/</guid>
      <description>简介 Registry作为Docker的核心组件之一负责镜像内容的存储与分发，客户端执行docker pull(push)命令都将直接与Regi</description>
    </item>
    
    <item>
      <title>Linux | Alpine 学习笔记</title>
      <link>https://ijayer.github.io/post/tech/os/linux/20170626-linux.alpine-notes/</link>
      <pubDate>Mon, 26 Jun 2017 17:53:01 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/os/linux/20170626-linux.alpine-notes/</guid>
      <description>简介 https://alpinelinux.org/ 包管理 apk 镜像源配置 官方镜像源：http://rsync.alpinelinux.org/alpine/MIRRORS.txt MIRRO</description>
    </item>
    
    <item>
      <title>MongoDB | Deploy a Replica Set With Docker and Keyfile Access Contorl</title>
      <link>https://ijayer.github.io/post/tech/db/mongodb/20170619-deploy-a-replica-set-with-docker-and-keyfile-access-contorl/</link>
      <pubDate>Mon, 19 Jun 2017 15:53:01 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/db/mongodb/20170619-deploy-a-replica-set-with-docker-and-keyfile-access-contorl/</guid>
      <description>集群服务原理图 整体原理图 主节点(Primary)搭建在物理主机 副本集原理图 集群规划 一个Primary节点，两个Secondary节点 ip port description 192.168.1.167</description>
    </item>
    
    <item>
      <title>MongoDB | 部署一个 Sharding 集群</title>
      <link>https://ijayer.github.io/post/tech/db/mongodb/20170618-deploy-a-sharding-cluster/</link>
      <pubDate>Sun, 18 Jun 2017 15:53:01 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/db/mongodb/20170618-deploy-a-sharding-cluster/</guid>
      <description>环境说明 由于是实验环境，故在一台主机上开设不同的端口来启动mongodb服务进行sharding集群部署。 ENV: MongoDB shell version v3.4.5 MongoDB server version: 3.4.5 Centos 7 x86_64 集群规划 s</description>
    </item>
    
    <item>
      <title>MongoDB | 部署一个 Replica Set 集群</title>
      <link>https://ijayer.github.io/post/tech/db/mongodb/20170615-deploy-a-replica-set-cluster/</link>
      <pubDate>Wed, 14 Jun 2017 15:53:01 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/db/mongodb/20170615-deploy-a-replica-set-cluster/</guid>
      <description>环境搭建 Replica Set：是有故障恢复功能的主从集群，由一个primary节点和一个或多个secondary节点组成。 环境说明 MongoDB shell version v3.4.5 MongoDB server version: 3.4.5 Centos 7 x86_64</description>
    </item>
    
    <item>
      <title>MongoDB | 基础学习笔记</title>
      <link>https://ijayer.github.io/post/tech/db/mongodb/20170612-basic-note/</link>
      <pubDate>Mon, 12 Jun 2017 15:53:01 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/db/mongodb/20170612-basic-note/</guid>
      <description>目录 特性 基础 基本概念 文档 集合 动态模式 命名 子集合 数据库 MongoDB保留的数据库 MongoDB Shell 数据类型 基本数据类型 日期 数组 内嵌文档 _id 和 ObjectId 使用 MongoDB Shell 使用 shell 执</description>
    </item>
    
    <item>
      <title>MongoDB | 集群</title>
      <link>https://ijayer.github.io/post/tech/db/mongodb/20170612-cluster-note/</link>
      <pubDate>Mon, 12 Jun 2017 15:53:01 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/db/mongodb/20170612-cluster-note/</guid>
      <description>什么是集群 集群(cluster)：指一组计算机系统作为一个整体向用户提供服务，这些单个的计算机系统在集群中称为节点(node)，通常通过局域</description>
    </item>
    
    <item>
      <title>Golang | 同步与锁</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20170608-go-sync-and-mutex/</link>
      <pubDate>Thu, 08 Jun 2017 16:07:43 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20170608-go-sync-and-mutex/</guid>
      <description>Mutex 互斥锁是传统的并发程序对共享资源进行访问控制的主要手段。 sync.Mutex 是一个互斥锁，其作用是守护在临界区入口来保证同一时间只有一个线程进入临界区。其在</description>
    </item>
    
    <item>
      <title>Golang | 闭包</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20170603-go-closure/</link>
      <pubDate>Sat, 03 Jun 2017 16:07:43 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20170603-go-closure/</guid>
      <description>闭包概念 闭包字面定义：闭包是由函数及相关引用环境组合而形成的实体。(即：闭包=函数+引用环境) 闭包的理解：闭包是个函数，而他记住了周期性发生</description>
    </item>
    
    <item>
      <title>Linux | Centos 系统优化</title>
      <link>https://ijayer.github.io/post/tech/os/linux/20170525-linux.centos-notes/</link>
      <pubDate>Thu, 25 May 2017 17:53:01 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/os/linux/20170525-linux.centos-notes/</guid>
      <description>更新系统 备份系统镜像源 $ cd /etc/yum.repos.d $ cp CentOS-Base.repo CentOS-Base.repo.bak $ cp CentOS-Epel.repo CentOS-Epel.repo.bak 下载163的镜像源 $ wget http://mirrors.aliyun.com/repo/Centos-7.repo&amp;lsquo; $ mv Centos-7.repo CentOS-Base.repo 生成缓存 $ yum makecache 更新系统 $ yum upgrade 配置静态IP Centos-7·学习之</description>
    </item>
    
    <item>
      <title>Shell | 基础学习笔记</title>
      <link>https://ijayer.github.io/post/tech/code/shell/20170518-shell-scripts-basic-learn-notes/</link>
      <pubDate>Thu, 18 May 2017 17:53:01 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/shell/20170518-shell-scripts-basic-learn-notes/</guid>
      <description>Shell Scripts 变量 定义 - $ myname=zhe 使用 - $ echo $myname 只读 - $ readonly修饰变量 删除 - $ unset myname 变量类型： 局部变量 环境变量 Shell变量 Shell Scripts 字符串 &#39; &#39; 单引号 $ str=&#39;this is</description>
    </item>
    
    <item>
      <title>Linux | Bash 基础</title>
      <link>https://ijayer.github.io/post/tech/os/linux/20170515-bash-basic-notes/</link>
      <pubDate>Mon, 15 May 2017 17:53:01 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/os/linux/20170515-bash-basic-notes/</guid>
      <description>一个工具·bash-completion 选项/参数补齐 1 $ apt install bash-completion Bash中的常用命令 type 1 # 查询指令是否为bash shell的内置指令(找指令</description>
    </item>
    
    <item>
      <title>Linux | Systemd 基础</title>
      <link>https://ijayer.github.io/post/tech/os/linux/20170511-systemd-basic/</link>
      <pubDate>Thu, 11 May 2017 17:53:01 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/os/linux/20170511-systemd-basic/</guid>
      <description>由来 历史上，Linux 的启动一直采用init进程。下面的命令用来启动服务。 1 2 3 $ sudo /etc/init.d/apache2 start # 或者 $ service apache2 start 这种方法有两个缺点： 一是启动时间长。i</description>
    </item>
    
    <item>
      <title>Docker | 网络实现和网络模式</title>
      <link>https://ijayer.github.io/post/tech/devops/docker/20170509-docker-%E7%BD%91%E7%BB%9C%E5%AE%9E%E7%8E%B0%E5%92%8C%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 09 May 2017 16:39:25 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/docker/20170509-docker-%E7%BD%91%E7%BB%9C%E5%AE%9E%E7%8E%B0%E5%92%8C%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F/</guid>
      <description>我们在使用docker run创建Docker容器时，可以用&amp;ndash;net选项指定容器的网络模式；Docker网络有四种模式: 桥模式：&amp;</description>
    </item>
    
    <item>
      <title>Docker | 容器间访问方式</title>
      <link>https://ijayer.github.io/post/tech/devops/docker/20170505-%E5%AE%B9%E5%99%A8%E9%97%B4%E8%AE%BF%E9%97%AE%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Fri, 05 May 2017 16:39:25 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/docker/20170505-%E5%AE%B9%E5%99%A8%E9%97%B4%E8%AE%BF%E9%97%AE%E6%96%B9%E5%BC%8F/</guid>
      <description>端口映射 用 docker run 的 -P or -p来映射端口 -P: Docker随机映射宿主机49000~49900的一个端口到容器内部开放的网络端口 1 2 3 $ docker run --name test -d -P ubuntu:14.04</description>
    </item>
    
    <item>
      <title>Docker | 数据卷</title>
      <link>https://ijayer.github.io/post/tech/devops/docker/20170503-data-volume/</link>
      <pubDate>Wed, 03 May 2017 16:39:25 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/docker/20170503-data-volume/</guid>
      <description>数据卷 数据卷(Data Volume): 可供一个或多个容器使用的特殊目录，绕过UFS Data Volume可在容器间共享和重用 对Data Volume的修改立马生效 对</description>
    </item>
    
    <item>
      <title>Docker | 使用 Docker 部署 Go 程序</title>
      <link>https://ijayer.github.io/post/tech/devops/docker/20170502-deploy-go-app-with-docker/</link>
      <pubDate>Tue, 02 May 2017 16:39:25 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/docker/20170502-deploy-go-app-with-docker/</guid>
      <description>Docker部署编译好的Go web app 一、以ubuntu:14.04为基础构建Go web app容器 生成Linux平台的可执行程序 1 2 3 4 5 6 7 # 开发平</description>
    </item>
    
    <item>
      <title>『心之所向，素履以往』— 舟山</title>
      <link>https://ijayer.github.io/post/footprint/20170501-%E8%88%9F%E5%B1%B1/</link>
      <pubDate>Mon, 01 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/footprint/20170501-%E8%88%9F%E5%B1%B1/</guid>
      <description>阳光温热，岁月静好...</description>
    </item>
    
    <item>
      <title>MongoDB | 配置选项</title>
      <link>https://ijayer.github.io/post/tech/db/mongodb/20170423-config-options/</link>
      <pubDate>Sun, 23 Apr 2017 15:53:01 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/db/mongodb/20170423-config-options/</guid>
      <description>Configuration File Offical：The Official Doc.Configuration File Options NOTE: File Format: YAML YAML does not support tab characters for indentation: use spaces instead. Use The Configuration File Specify the config file with --config 1 2 mongod --config /etc/mongod.conf mongos --config /etc/mongos.conf Specify the config file with -f 1 2 mongod -f /etc/mongod.conf mongos -f /etc/mongos.conf Core Options systemLog 1 2 3</description>
    </item>
    
    <item>
      <title>Caddy | 学习笔记</title>
      <link>https://ijayer.github.io/post/tech/web/20170419-caddy-learning-notes/</link>
      <pubDate>Wed, 19 Apr 2017 17:53:01 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/web/20170419-caddy-learning-notes/</guid>
      <description>安装 Linux Note: You must specify a personal or commercial license; see getcaddy.com for instructions. (安装时要求必须给出一种许可证，所以下面命令添加了选项：-s personal) 1 2 3 4 5 # 一键安装脚本 [zhe@zhe Temp]$ curl https://getcaddy.com | bash -s personal # 查看</description>
    </item>
    
    <item>
      <title>Docker | Dockerfile</title>
      <link>https://ijayer.github.io/post/tech/devops/docker/20170410-dockerfile/</link>
      <pubDate>Mon, 10 Apr 2017 17:39:25 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/docker/20170410-dockerfile/</guid>
      <description>FROM MAINTAINER RUN COPY ADD CMD ENTRYPOINT EXPOSE ENV ARG VOLUME WORKDIR ONBUILD FROM 说明：FROM，指定镜像构建的基础镜像，每个Dockerfile都必须包含FROM指令，且为第一条指令。 格式：F</description>
    </item>
    
    <item>
      <title>Docker | 构建镜像</title>
      <link>https://ijayer.github.io/post/tech/devops/docker/20170410-build-image/</link>
      <pubDate>Mon, 10 Apr 2017 16:39:25 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/docker/20170410-build-image/</guid>
      <description>构建镜像 docker build 1 2 $ docker build [选项] &amp;lt;上下文路径/URL/-&amp;gt; $ docker build -t nginx:v3 . 镜像构建的上下文(Context) docker build工作原理 C/S</description>
    </item>
    
    <item>
      <title>Docker | 常用命令</title>
      <link>https://ijayer.github.io/post/tech/devops/docker/20170409-common-cmd/</link>
      <pubDate>Sun, 09 Apr 2017 16:39:25 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/docker/20170409-common-cmd/</guid>
      <description>获取镜像：docker pull 1 2 3 # Usage $ docker pull [选项] [Docker Registry地址]&amp;lt;仓库名&amp;gt;:&amp;lt;标签&amp;gt; $ docker pull ubuntu:14.04 列出镜像：doc</description>
    </item>
    
    <item>
      <title>Docker | 基础知识学习笔记</title>
      <link>https://ijayer.github.io/post/tech/devops/docker/20170408-docker-basic-notes/</link>
      <pubDate>Sat, 08 Apr 2017 16:39:25 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/docker/20170408-docker-basic-notes/</guid>
      <description>Docker要求64bit系统(x86 or arm) Docker要求Linux内核：3.10+ Docker简介 Docker：Go 实现，对进程进行封装隔</description>
    </item>
    
    <item>
      <title>Docker | Install</title>
      <link>https://ijayer.github.io/post/tech/devops/docker/20170408-docker-01-install/</link>
      <pubDate>Sat, 08 Apr 2017 15:39:25 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/docker/20170408-docker-01-install/</guid>
      <description>简介 本文基于Ubuntu16.04_64bit_OS 和 CentOS7_64bit_OS 查看系统信息 $ uname -a Linux device_name 4.4.0-31-generic #50~14.04.1-Ubuntu SMP Wed Jul 13 01:07:32 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux 使用root账号进行安装 安装前准备 Ubuntu</description>
    </item>
    
    <item>
      <title>Network | 理论填坑</title>
      <link>https://ijayer.github.io/post/tech/network/20170307-net-pits/</link>
      <pubDate>Tue, 07 Mar 2017 17:53:01 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/network/20170307-net-pits/</guid>
      <description>内网，外网概念整理 内网：即局域网，如学校，企业网络；局域网内的每台计算机的IP地址在本局域网内唯一，不可重复。但两个局域网内的内网IP可相同</description>
    </item>
    
    <item>
      <title>Golang | Context 基础</title>
      <link>https://ijayer.github.io/post/tech/code/golang/20170307-go-context-%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Tue, 07 Mar 2017 16:07:43 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20170307-go-context-%E5%9F%BA%E7%A1%80/</guid>
      <description>简介 Context： 上下文，上下层间传递的内容，通常理解为一个程序单元(goroutine)的运行状态、快照或者现场。主要应用在由一个请求衍</description>
    </item>
    
    <item>
      <title>MongoDB | 安装和配置</title>
      <link>https://ijayer.github.io/post/tech/db/mongodb/20170307-install-and-config/</link>
      <pubDate>Tue, 07 Mar 2017 15:53:01 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/db/mongodb/20170307-install-and-config/</guid>
      <description>Install Package Summary MongoDB安装包说明： mongodb-org 可自动安装以下四个包 mongodb-org-server 可安装mongod进程、配置文件和启动脚本 mongod：核心基础进程，用来接受和读写</description>
    </item>
    
    <item>
      <title>『心之所向，素履以往』— 乌镇</title>
      <link>https://ijayer.github.io/post/footprint/20160903-%E4%B9%8C%E9%95%87/</link>
      <pubDate>Fri, 23 Sep 2016 17:18:52 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/footprint/20160903-%E4%B9%8C%E9%95%87/</guid>
      <description>乌镇 一次未走心的旅行，一种说不出来的心情 就这样，走走停停，看那似曾相识的风景 青石板地，长街巷弄 小桥流水，灯火阑珊 似水年华，乌篷船，桥里桥，老</description>
    </item>
    
    <item>
      <title></title>
      <link>https://ijayer.github.io/post/tech/code/golang/20180621-go_cmd_01_go-build/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/code/golang/20180621-go_cmd_01_go-build/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
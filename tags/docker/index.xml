<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on ijayer</title>
    <link>https://ijayer.github.io/tags/docker/</link>
    <description>Recent content in docker on ijayer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 29 Oct 2018 16:58:16 +0800</lastBuildDate>
    
	<atom:link href="https://ijayer.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DevOps | 基于 Drone CI 部署 Go 语言项目 — Web Server</title>
      <link>https://ijayer.github.io/post/tech/devops/cicd/20181029-cicd-03-drone-03-practices2/</link>
      <pubDate>Mon, 29 Oct 2018 16:58:16 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/cicd/20181029-cicd-03-drone-03-practices2/</guid>
      <description>前面完成了基础设施搭建和测试，接下来就该将 Drone CI/CD 应用到项目中了。 这里涉及到的前几篇内容有： Drone 的基本概念 Drone 服务部署 Docker-Compose 基础 Docker Registry 服务部署 简介 这里以一</description>
    </item>
    
    <item>
      <title>Docker | Deploy Docker Registry and Web UI</title>
      <link>https://ijayer.github.io/post/tech/devops/docker/20181026-registry-and-webui/</link>
      <pubDate>Fri, 26 Oct 2018 09:48:45 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/docker/20181026-registry-and-webui/</guid>
      <description>背景：最近基于 Drone 搭建了用于公司内部使用的 CI/CD 平台，而 CI/CD 过程中生成的 Docker Image 需要能够进行集中式的存储和管理 (即：push、pull、delete 等)</description>
    </item>
    
    <item>
      <title>DevOps | Dockerizing Bitbucket Server &amp; Jira &amp; Confluence</title>
      <link>https://ijayer.github.io/post/tech/devops/cicd/20180927-cicd-04-dockerizing-bitbucketserver/</link>
      <pubDate>Thu, 27 Sep 2018 22:09:25 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/cicd/20180927-cicd-04-dockerizing-bitbucketserver/</guid>
      <description>基于 Docker 部署 Bitbucket Server 基于 Docker 部署 Jira 基于 Docker 部署 Confluence Dockerizing Bitbucket Server 部署 Bitbucket Server 需要两个 Docker 镜像：Bitbucket-Server &amp;amp; Postgre-DB 1 2 $ docker pull atlassian/bitbucket-server:5.10.2 $ docker pull postgres:9.6 在宿主机创建 Bitbucket Server</description>
    </item>
    
    <item>
      <title>DevOps | CI/CD 实践: Drone &#43; Docker &#43; Bitbucket Server 服务部署</title>
      <link>https://ijayer.github.io/post/tech/devops/cicd/20180926-cicd-03-drone-02-practices/</link>
      <pubDate>Wed, 26 Sep 2018 23:40:06 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/cicd/20180926-cicd-03-drone-02-practices/</guid>
      <description>经过几天的摸索之后，开始动手搭建一下 CI/CD 的环境吧！实践内容涉及： 怎么用 Docker 搭建 Bitbucket Server 怎么启动 Drone Service 实践过程中踩过那些坑 &amp;hellip;&amp;hellip; 说明 开始之前先了解一下实践环</description>
    </item>
    
    <item>
      <title>DevOps | Drone 的基本概念</title>
      <link>https://ijayer.github.io/post/tech/devops/cicd/20180925-cicd-03-drone-01-basic/</link>
      <pubDate>Tue, 25 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/cicd/20180925-cicd-03-drone-01-basic/</guid>
      <description>Drone 一个原生支持 Docker 的开源 CI 系统，基于 Go 编写。 Drone 的核心概念 Drone 的运作原理(架构) Drone 的基本术语 转自：GeekPipe-基于Drone的持续集成实践之</description>
    </item>
    
    <item>
      <title>Docker | Docker Compose 基础</title>
      <link>https://ijayer.github.io/post/tech/devops/docker/20180925-docker-compose-note/</link>
      <pubDate>Tue, 25 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/docker/20180925-docker-compose-note/</guid>
      <description>平时启动容器的时候，一般会使用 docker run 命令，但会遇到一种情况就是当一个项目需要启动多个容器的时，docker run 命令就显得不是很方便了。 为此 Docker 推出</description>
    </item>
    
    <item>
      <title>Monitor | 基于 cAdvisor&#43;InfluxDB&#43;Grafana 搭建监控系统（二）| 监控平台数据持久化</title>
      <link>https://ijayer.github.io/post/tech/devops/monitor/20180830-persistent-monitoring-platform-data/</link>
      <pubDate>Thu, 30 Aug 2018 18:57:08 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/monitor/20180830-persistent-monitoring-platform-data/</guid>
      <description>背景说明 通常我们会采用本地持久存储卷来保存一些 Docker 容器服务的配置与数据，这样做的好处是配置与数据可以在容器主机上比较方便的进行修改、备份，因为</description>
    </item>
    
    <item>
      <title>Monitor | 基于 cAdvisor&#43;InfluxDB&#43;Grafana 搭建监控系统</title>
      <link>https://ijayer.github.io/post/tech/devops/monitor/20180729-deploy-a-monitor-service-based-on-with-cadvisor-grafana-influxdb/</link>
      <pubDate>Sun, 29 Jul 2018 18:57:08 +0000</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/monitor/20180729-deploy-a-monitor-service-based-on-with-cadvisor-grafana-influxdb/</guid>
      <description>Docker 监控系统说明 系统说明 1 2 3 CentOS: 7.4 | X86_64 Docker: 18.06 | CE Monitor: 基于 docker 容器搭建监控系统 Docker 监控组件 1 2 3 cAdvisor: 用于数据采集, 对应镜像：google/cadvisor</description>
    </item>
    
    <item>
      <title>Docker | 跨主机通信</title>
      <link>https://ijayer.github.io/post/tech/devops/docker/20170919-%E8%B7%A8%E4%B8%BB%E6%9C%BA%E9%80%9A%E4%BF%A1/</link>
      <pubDate>Tue, 19 Sep 2017 16:39:25 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/docker/20170919-%E8%B7%A8%E4%B8%BB%E6%9C%BA%E9%80%9A%E4%BF%A1/</guid>
      <description>相关知识 Overlay Network？ An overlay network is a computer network that is built on top of another network. 覆盖网络，是一个建立在另一个网络上的计算机网络。覆盖网络中的节点被认为是通过虚拟或逻</description>
    </item>
    
    <item>
      <title>Docker | 容器配置静态 IP</title>
      <link>https://ijayer.github.io/post/tech/devops/docker/20170713-%E5%AE%B9%E5%99%A8%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip/</link>
      <pubDate>Thu, 13 Jul 2017 16:39:25 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/docker/20170713-%E5%AE%B9%E5%99%A8%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip/</guid>
      <description>方式一：Pipework 借助pipework实现，容器重启后 IP 需要重新配置。 Pipework简介 Software-Defined Networking for Linux Containers(SDN). Pipework是一个Docker</description>
    </item>
    
    <item>
      <title>Docker | FAQ</title>
      <link>https://ijayer.github.io/post/tech/devops/docker/faq/</link>
      <pubDate>Tue, 11 Jul 2017 16:39:25 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/docker/faq/</guid>
      <description>Docker 使用过程中经常遇到的问题备忘 Q1: 基于Alpine构建的Docker镜像出现时间和宿主时间不同步问题，时区设置有问题 Alpine默认时区·UT</description>
    </item>
    
    <item>
      <title>Docker | 私有仓库搭建</title>
      <link>https://ijayer.github.io/post/tech/devops/docker/20170704-%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Tue, 04 Jul 2017 16:39:25 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/docker/20170704-%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E6%90%AD%E5%BB%BA/</guid>
      <description>简介 Registry作为Docker的核心组件之一负责镜像内容的存储与分发，客户端执行docker pull(push)命令都将直接与Regi</description>
    </item>
    
    <item>
      <title>Docker | 网络实现和网络模式</title>
      <link>https://ijayer.github.io/post/tech/devops/docker/20170509-docker-%E7%BD%91%E7%BB%9C%E5%AE%9E%E7%8E%B0%E5%92%8C%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 09 May 2017 16:39:25 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/docker/20170509-docker-%E7%BD%91%E7%BB%9C%E5%AE%9E%E7%8E%B0%E5%92%8C%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F/</guid>
      <description>我们在使用docker run创建Docker容器时，可以用&amp;ndash;net选项指定容器的网络模式；Docker网络有四种模式: 桥模式：&amp;</description>
    </item>
    
    <item>
      <title>Docker | 容器间访问方式</title>
      <link>https://ijayer.github.io/post/tech/devops/docker/20170505-%E5%AE%B9%E5%99%A8%E9%97%B4%E8%AE%BF%E9%97%AE%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Fri, 05 May 2017 16:39:25 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/docker/20170505-%E5%AE%B9%E5%99%A8%E9%97%B4%E8%AE%BF%E9%97%AE%E6%96%B9%E5%BC%8F/</guid>
      <description>端口映射 用 docker run 的 -P or -p来映射端口 -P: Docker随机映射宿主机49000~49900的一个端口到容器内部开放的网络端口 1 2 3 $ docker run --name test -d -P ubuntu:14.04</description>
    </item>
    
    <item>
      <title>Docker | 数据卷</title>
      <link>https://ijayer.github.io/post/tech/devops/docker/20170503-data-volume/</link>
      <pubDate>Wed, 03 May 2017 16:39:25 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/docker/20170503-data-volume/</guid>
      <description>数据卷 数据卷(Data Volume): 可供一个或多个容器使用的特殊目录，绕过UFS Data Volume可在容器间共享和重用 对Data Volume的修改立马生效 对</description>
    </item>
    
    <item>
      <title>Docker | 使用 Docker 部署 Go 程序</title>
      <link>https://ijayer.github.io/post/tech/devops/docker/20170502-deploy-go-app-with-docker/</link>
      <pubDate>Tue, 02 May 2017 16:39:25 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/docker/20170502-deploy-go-app-with-docker/</guid>
      <description>Docker部署编译好的Go web app 一、以ubuntu:14.04为基础构建Go web app容器 生成Linux平台的可执行程序 1 2 3 4 5 6 7 # 开发平</description>
    </item>
    
    <item>
      <title>Docker | Dockerfile</title>
      <link>https://ijayer.github.io/post/tech/devops/docker/20170410-dockerfile/</link>
      <pubDate>Mon, 10 Apr 2017 17:39:25 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/docker/20170410-dockerfile/</guid>
      <description>FROM MAINTAINER RUN COPY ADD CMD ENTRYPOINT EXPOSE ENV ARG VOLUME WORKDIR ONBUILD FROM 说明：FROM，指定镜像构建的基础镜像，每个Dockerfile都必须包含FROM指令，且为第一条指令。 格式：F</description>
    </item>
    
    <item>
      <title>Docker | 构建镜像</title>
      <link>https://ijayer.github.io/post/tech/devops/docker/20170410-build-image/</link>
      <pubDate>Mon, 10 Apr 2017 16:39:25 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/docker/20170410-build-image/</guid>
      <description>构建镜像 docker build 1 2 $ docker build [选项] &amp;lt;上下文路径/URL/-&amp;gt; $ docker build -t nginx:v3 . 镜像构建的上下文(Context) docker build工作原理 C/S</description>
    </item>
    
    <item>
      <title>Docker | 常用命令</title>
      <link>https://ijayer.github.io/post/tech/devops/docker/20170409-common-cmd/</link>
      <pubDate>Sun, 09 Apr 2017 16:39:25 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/docker/20170409-common-cmd/</guid>
      <description>获取镜像：docker pull 1 2 3 # Usage $ docker pull [选项] [Docker Registry地址]&amp;lt;仓库名&amp;gt;:&amp;lt;标签&amp;gt; $ docker pull ubuntu:14.04 列出镜像：doc</description>
    </item>
    
    <item>
      <title>Docker | 基础知识学习笔记</title>
      <link>https://ijayer.github.io/post/tech/devops/docker/20170408-docker-basic-notes/</link>
      <pubDate>Sat, 08 Apr 2017 16:39:25 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/docker/20170408-docker-basic-notes/</guid>
      <description>Docker要求64bit系统(x86 or arm) Docker要求Linux内核：3.10+ Docker简介 Docker：Go 实现，对进程进行封装隔</description>
    </item>
    
    <item>
      <title>Docker | Install</title>
      <link>https://ijayer.github.io/post/tech/devops/docker/20170408-docker-01-install/</link>
      <pubDate>Sat, 08 Apr 2017 15:39:25 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/devops/docker/20170408-docker-01-install/</guid>
      <description>简介 本文基于Ubuntu16.04_64bit_OS 和 CentOS7_64bit_OS 查看系统信息 $ uname -a Linux device_name 4.4.0-31-generic #50~14.04.1-Ubuntu SMP Wed Jul 13 01:07:32 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux 使用root账号进行安装 安装前准备 Ubuntu</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rabbitmq on ijayer</title>
    <link>https://ijayer.github.io/tags/rabbitmq/</link>
    <description>Recent content in rabbitmq on ijayer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 22 Jun 2019 22:56:56 +0800</lastBuildDate>
    
	<atom:link href="https://ijayer.github.io/tags/rabbitmq/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Rabbitmq | 06 - RPC</title>
      <link>https://ijayer.github.io/post/tech/mq/20190614-rabbitmq-rpc/</link>
      <pubDate>Sat, 22 Jun 2019 22:56:56 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/mq/20190614-rabbitmq-rpc/</guid>
      <description>这一节使用 RabbitMQ 构建 RPC 系统：包含一个客户端和一个可扩展的服务端，服务端是一个虚拟的 RPC Service，用来返回 Fibonacci 数 有关 RPC 的说明： 尽管 RPC 在计算过程中</description>
    </item>
    
    <item>
      <title>Rabbitmq | 05 - Topics</title>
      <link>https://ijayer.github.io/post/tech/mq/20190613-rabbitmq-topics/</link>
      <pubDate>Thu, 13 Jun 2019 22:48:56 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/mq/20190613-rabbitmq-topics/</guid>
      <description>前面，分别使用了 fanout 和 direct 类型实现了简易的日志生产、路由和消费，虽然 direct 可以按照 Binding_Key 绑定关系实现日志过滤，但其仍有局限性，即不能基于多个标准进行消息</description>
    </item>
    
    <item>
      <title>Rabbitmq | 04 - Routing</title>
      <link>https://ijayer.github.io/post/tech/mq/20190602-rabbitmq-routing/</link>
      <pubDate>Sun, 02 Jun 2019 17:05:35 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/mq/20190602-rabbitmq-routing/</guid>
      <description>这一小节继续前面的内容，给日志系统添加新特性：只订阅一部分消息。 Bindings 上一小节我们创建了 Exchange 和 Queue 的一个绑定，代码描述如下： 1 2 3 4 5 6 7 err = ch.QueueBind( q.Name, &amp;#34;&amp;#34;,</description>
    </item>
    
    <item>
      <title>Rabbitmq | 03 - Publish/Subscribe</title>
      <link>https://ijayer.github.io/post/tech/mq/20190519-rabbitmq-publish.subscribe/</link>
      <pubDate>Sun, 19 May 2019 17:28:12 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/mq/20190519-rabbitmq-publish.subscribe/</guid>
      <description>Publish/Subscribe: Send messages to many consumers at once. 这一小节，通过实现一个日志系统来学习 RabbitMQ p/b 的简单用法：该日志系统由2个程序构成，第一个用来发送日志消息，第二个则用来接收并将其</description>
    </item>
    
    <item>
      <title>Rabbitmq | 02 - Work Queues</title>
      <link>https://ijayer.github.io/post/tech/mq/20190401-rabbitmq-work-queues/</link>
      <pubDate>Mon, 01 Apr 2019 11:13:00 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/mq/20190401-rabbitmq-work-queues/</guid>
      <description>实现一个用来在多个 Workers 之间分发 耗时任务 的工作队列。 那么为什么会出现工作队列呢？可以和上节的 Simple 队列做简单对比： Simple 队列是一一对应的，而且我们在实际</description>
    </item>
    
    <item>
      <title>Rabbitmq | 01 - Hello World</title>
      <link>https://ijayer.github.io/post/tech/mq/20190328-rabbitmq-hello-world/</link>
      <pubDate>Fri, 29 Mar 2019 16:05:39 +0800</pubDate>
      
      <guid>https://ijayer.github.io/post/tech/mq/20190328-rabbitmq-hello-world/</guid>
      <description>RabbitMQ 是一个开源的、使用最广的消息队列。 Erlang 开发，对高并发、路由、负载均衡、数据持久化有很好的支持。 支持的协议：AMQP，XMPP, SMTP, STOMP 支持集群部</description>
    </item>
    
  </channel>
</rss>